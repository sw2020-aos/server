package com.aos.supplier;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aos.handling.Handling;
import com.aos.handling.HandlingMapper;
import com.aos.ingredient.Ingredient;
import com.aos.ingredient.IngredientMapper;
import com.aos.tray.Tray;
import com.aos.tray.TrayMapper;

@Service
public class SupplierServiceImpl implements SupplierService {
	@Autowired
	private SupplierMapper supplierMapper;

	@Autowired
	private HandlingMapper handlingMapper;

	@Autowired
	private IngredientMapper ingredientMapper;

	@Autowired
	private TrayMapper trayMapper;

	@Override
	public void registSupplier(Supplier supplier, String[] handlingIngredients) {
		if (supplier != null) {
			// 입력 값이 존재하는 지 확인한다.
			try {
				Supplier oneSupplier = new Supplier();
				oneSupplier.setName(supplier.getName());

				if (supplierMapper.count(oneSupplier) < 1) {
					// 거래처명이 중복되지 않는지 확인한다.
					supplier.setStatus("Y");
					supplierMapper.insert(supplier);
					supplier = supplierMapper.select(supplier);

					for (int i = 0; i < handlingIngredients.length; i++) {
						Ingredient ingredient = new Ingredient(null, handlingIngredients[i], null, null, "Y");
						ingredient = ingredientMapper.select(ingredient);
						Handling handling = new Handling(null, ingredient.getNo(), null, "Y");

						if (handlingMapper.select(handling) != null) {
							// 기존 취급 테이블에 해당 식자재들 중 주 거래처가 설정된 항목이 있는지 확인한다. 없으면 거래처 등록하는 거래처가 주 거래처로 자동
							// 설정된다.
							handling = new Handling(null, ingredient.getNo(), supplier.getNo(), "N");
							handlingMapper.insert(handling);
						} else {
							handling = new Handling(null, ingredient.getNo(), supplier.getNo(), "Y");
							handlingMapper.insert(handling);
						}
					}
				} else {
					Supplier twoSupplier = new Supplier();
					twoSupplier.setName(supplier.getName());
					twoSupplier.setStatus("N");
					twoSupplier = supplierMapper.select(twoSupplier);

					if (twoSupplier != null) {
						twoSupplier.setStatus("Y");
						supplierMapper.update(twoSupplier);
						Handling handling = new Handling(null, null, twoSupplier.getNo(), null);
						handlingMapper.delete(handling);

						for (int i = 0; i < handlingIngredients.length; i++) {
							Ingredient ingredient = new Ingredient(null, handlingIngredients[i], null, null, "Y");
							ingredient = ingredientMapper.select(ingredient);
							handling = new Handling(null, ingredient.getNo(), null, "Y");
							if (handlingMapper.select(handling) != null) {
								handling = new Handling(null, ingredient.getNo(), supplier.getNo(), "N");
								handlingMapper.insert(handling);
							} else {
								handling = new Handling(null, ingredient.getNo(), supplier.getNo(), "Y");
								handlingMapper.insert(handling);
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public Supplier viewSupplier(Supplier supplier) {
		Supplier oneSupplier = new Supplier();
		oneSupplier.setNo(supplier.getNo());

		try {
			oneSupplier = supplierMapper.select(oneSupplier);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return oneSupplier;
	}

	@Override
	public List<Supplier> supplierList() {
		List<Supplier> supplierList = new ArrayList<>();
		Supplier supplier = new Supplier();
		supplier.setStatus("Y");

		try {
			supplierList = supplierMapper.list(supplier);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return supplierList;
	}

	@Override
	public void editSupplier(Supplier supplier, String[] newHandlingIngredients) {
		if (supplier != null) {
			Handling handling = new Handling();
			handling.setSupplierNo(supplier.getNo());
			handling.setMainSupplierStatus("N");
			try {
				List<Handling> handlingList = handlingMapper.list(handling);
				
				for (int i = 0; i < handlingList.size(); i ++) {
					Handling deleteHandling = new Handling();
					deleteHandling.setIngredientNo(handlingList.get(i).getIngredientNo());
					deleteHandling.setSupplierNo(handlingList.get(i).getSupplierNo());
					deleteHandling.setMainSupplierStatus("N");
					
					handlingMapper.delete(deleteHandling);
				}
				
				for (int i = 0; i < newHandlingIngredients.length; i++) {
					Ingredient ingredient = new Ingredient(null, newHandlingIngredients[i], null, null, "Y");
					ingredient = ingredientMapper.select(ingredient);
					handling = new Handling(null, ingredient.getNo(), null, "Y");
					if (handlingMapper.select(handling) != null) {
						handling = new Handling(null, ingredient.getNo(), supplier.getNo(), "N");
						handlingMapper.insert(handling);
					} else {
						handling = new Handling(null, ingredient.getNo(), supplier.getNo(), "Y");
						handlingMapper.insert(handling);
					}
				}
				
				supplierMapper.update(supplier);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public String deleteSupplier(Supplier supplier) {
		if (supplier != null) {
			Handling handling = new Handling();
			handling.setSupplierNo(supplier.getNo());
			
			try {
				List<Handling> handlingList = handlingMapper.list(handling);
				
				for (int i = 0; i < handlingList.size(); i ++) {
					if ("Y".equals(handlingList.get(i).getMainSupplierStatus())) {
						return "fail";
					} else {
						handlingMapper.delete(handlingList.get(i));
					}
				}
				supplierMapper.delete(supplier);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		return "success";
	}

	@Override
	public int checkSupplier(String name) {
		Supplier supplier = new Supplier();
		int count = 0;

		try {
			supplier.setName(name);
			count = supplierMapper.count(supplier);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return count;
	}

}
