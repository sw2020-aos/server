package com.aos.ingredient;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aos.handling.Handling;
import com.aos.handling.HandlingMapper;
import com.aos.requestorder.RequestOrder;
import com.aos.requestorder.RequestOrderMapper;
import com.aos.supplier.Supplier;
import com.aos.supplier.SupplierMapper;
import com.aos.tray.Tray;
import com.aos.tray.TrayMapper;

@Service
public class IngredientServiceImpl implements IngredientService{
	@Autowired
	private IngredientMapper ingredientMapper;
	@Autowired
	private SupplierMapper supplierMapper;
	@Autowired
	private TrayMapper trayMapper;
	@Autowired
	private HandlingMapper handlingMapper;
	@Autowired
	private RequestOrderMapper requestOrderMapper;
	
	@Override
	public List<String> showSupplier() {
		List<String> supplierName = new ArrayList<String>();
		try {
			List<Supplier> supplierList = supplierMapper.list();
			for (int i = 0; i < supplierList.size(); i++) {
				supplierName.add(supplierList.get(i).getName());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return supplierName;
	}
	
	@Override
	public void registIngredient(Ingredient ingredient) {
		Ingredient clone = new Ingredient();
		clone.setName(ingredient.getName());
		clone.setUnitWeight(null);
		clone.setUnitPrice(null);
		clone.setStatus("N");
		try {
			Ingredient result = ingredientMapper.select(clone);
			if (result == null) {
				//상태가 N인게 존재하지 않으면
				ingredient.setStatus("Y");
				System.out.println(ingredient.getUnitWeight());
				ingredientMapper.insert(ingredient);
			} else {
				result.setUnitWeight(ingredient.getUnitWeight());
				result.setUnitPrice(ingredient.getUnitPrice());
				result.setStatus("Y");
				ingredientMapper.update(result);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public Ingredient viewIngredient(String name) {
		Ingredient result = null;
		try {
			result = ingredientMapper.selectbyname(name);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	@Override
	public Map<String, String> ingredientList() {
		List<Ingredient> ingredientList = null;
		Map<String, String> arri = new HashMap<String, String>();
		String ingredientNo;
		String notFound = "notFound";
		
		try {
			ingredientList = ingredientMapper.selectAll("Y");
			for (int i = 0; i < ingredientList.size(); i++) {
				ingredientNo = ingredientList.get(i).getNo();
				Supplier resultbyingredientNo = supplierMapper.selectbyIngredientNo(ingredientNo);
				if (resultbyingredientNo == null) {
					arri.put(ingredientList.get(i).getName(), notFound);
					System.out.println("1");
				} else {
					arri.put(ingredientList.get(i).getName(), resultbyingredientNo.getName());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return arri;
	}

	@Override
	public void editIngredient(Ingredient ingredient) {
		/*
		 * if (입력값이 존재하는가?) {
		 * 		식자재 정보를 수정한다.
		 * }
		 */
	}

	@Override
	public void deleteIngredient(String no) {
		try {
			RequestOrder requestOrder = new RequestOrder();
			requestOrder.setIngredientNo(no);
			requestOrder.setStatus("O");
			RequestOrder order = requestOrderMapper.select(requestOrder);
			if (order.getIngredientNo() == null) {
				System.out.println("OK"); // 식자재 번호와 상태가 O인게 없으면 진행 해도됨.
				Tray tray = new Tray();
				tray.setIngredientNo(no);
				Tray result = trayMapper.select(tray);
				System.out.println("result: " + result);
				tray.setNo(result.getNo());
				Tray toNull = new Tray();
				trayMapper.delete(tray);
				toNull.setNo(result.getNo());
				trayMapper.insert(toNull);
				
				Handling handling = new Handling();
				handling.setIngredientNo(no);
				handlingMapper.delete(handling);
				
				Ingredient ingredient = new Ingredient();
				ingredient.setNo(no);
				ingredient.setStatus("N");
				ingredientMapper.update(ingredient);
			}
			
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
	}

	@Override
	public String checkIngredient(String name) {
		String result = "이름 중복안됨";
		Ingredient ingredient = new Ingredient();
		ingredient.setName(name);
		ingredient.setStatus("Y");
		try {
			int count = ingredientMapper.count(ingredient);
			System.out.println(count);
			if (count > 0) {
				result = "이름 중복됨";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}
